>=40 nonD nonE 45
')
ct <- xtabs(Count ~ Exposure + Disease + Age, data=one)
(ct <- xtabs(Count ~ Exposure + Disease + Age, data=one))
#MH Confidence Interval
one<- read.table(header=TRUE, text='
Age Disease Exposure Count
y D E 26
y nonD E 408
y D nonE 30
y nonD nonE 64
e D E 78
e nonD E 258
e D nonE 66
e nonD nonE 45
')
(ct <- xtabs(Count ~ Exposure + Disease + Age, data=one))
mantelhaen.test(ct)
log(OR_Woolf)+qnorm(0.025)*sqrt(1/(wWy+wWe))
log(OR_Woolf)+qnorm(0.975)*sqrt(1/(wWy+wWe))
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(stats)
library(fanplot)
armod=arima.sim(model=list(order=c(2,0,0),ar = c(1.4,-0.45)),n,sd=sqrt(1/4))
pacf(armod)
acf(armod)
acf(armod)
pacf(armod)
n=10000
a1=arima.sim(model=list(order=c(2,0,0),ar = c(1.2,-0.4)),n,sd=1)
n=1000
ar4=arima.sim(model=list(order=c(2,0,0),ar = c(1.4,-0.45)),n,sd=sqrt(1/4))
acf(ar4)
pacf(ar4)
n4=1000
ar4=arima.sim(model=list(order=c(2,0,0),ar = c(1.4,-0.45)),n4,sd=sqrt(1/4))
acf(ar4)
pacf(ar4)
n5=10000
a5=arima.sim(model=list(order=c(2,0,0),ar = c(1.2,-0.4)),n5,sd=1)
#Lags
reg1=lm(a5[2:n5]~a5[1:(n5-1)])
n5=10000
a5=arima.sim(model=list(order=c(2,0,0),ar = c(1.2,-0.4)),n5,sd=1)
#Lags
reg1=lm(a5[2:n5]~a5[1:(n5-1)])
reg2=lm(a5[3:n5]~a5[1:(n5-2)])
reg3=lm(a5[4:n5]~a5[1:(n5-3)])
reg4=lm(a5[5:n5]~a5[1:(n5-4)])
reg5=lm(a5[6:n5]~a5[1:(n5-5)])
reg1
reg2
reg3
reg4
reg5
partial=0
for(j in 2:6){
c=j
r=n5-j+1
lag=matrix(0,r,j)
for(i in 1:c){
lag[,i]=y[i:(i+r-1)]
}
lag=as.data.frame(lag)
fit=lm(lag$V1~.-1,data=lag)
partial[j]=coef(fit)[j-1]
}
(partial=partial[2:6])
plot(partial)
n4=1000
ar4=arima.sim(model=list(order=c(2,0,0),ar = c(-1.4,0.45)),n4,sd=sqrt(1/4))
n4=1000
ar4=arima.sim(model=list(order=c(2,0,0),ar = c(1.4,-0.45)),n4,sd=sqrt(1/4))
acf(ar4)
pacf(ar4)
ARMAacf(ar=c(1.2,-0.4),lag.max=5,pacf=TRUE)
(partial=partial[2:6])
ARMAacf(ar=c(1.2,-0.4),lag.max=5,pacf=TRUE)
x=seq(1,n5,1)
y=ts(a5)
length(y)
partial=0
for(j in 2:6){
c=j
r=n5-j+1
lag=matrix(0,r,j)
for(i in 1:c){
lag[,i]=y[i:(i+r-1)]
}
lag=as.data.frame(lag)
fit=lm(lag$V1~.-1,data=lag)
partial[j]=coef(fit)[j-1]
}
(partial=partial[2:6])
plot(partial)
ARMAacf(ar=c(1.2,-0.4),lag.max=5,pacf=TRUE)
coef
coef(fit)
lag
knitr::opts_chunk$set(echo = TRUE)
z = c(1,0,.9) # coefficients of the polynomial
(a = polyroot(z)) # print one root = 1 + i/sqrt(3)
z = c(1,0,.9) # coefficients of the polynomial
(a = polyroot(z)) # print one root = 1 + i/sqrt(3)
arg = Arg(a)/(2*pi)
(arg = Arg(a)/(2*pi))
1/arg
ar2 = arima.sim(list(order=c(2,0,0), ar=c(0,-.9)), n = 16)
z = c(1,0,.9) # coefficients of the polynomial
(a = polyroot(z)) # print one root = 1 + i/sqrt(3)
arg = Arg(a)/(2*pi)
1/arg
ar2 = arima.sim(list(order=c(2,0,0), ar=c(0,-.9)), n = 16)
plot(ar2, axes=FALSE, xlab="Time")
axis(2); axis(1, at=seq(0,16,by=4)); box()
abline(v=seq(0,16,by=4), lty=2)
ACF = ARMAacf(ar=c(0,-.9), ma=0, 50)
plot(ACF, type="h", xlab="lag")
abline(h=0)
acf(ar2)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c(0.6)),n)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,0,1), ar=c(0.6)),n)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
??forecast
globtemp
library(astsa)
data('globtemp')
136/35
globtemp
sarima.for(globtemp,10,1,0,0)
linmod=lm(globtemp~time(globtemp),na.action=NULL)
resids=resid(linmod)
invisible(acf2(resids,max.lag=20))
sarima(resids,1,0,0,no.constant=T)
sarima(resids,1,0,0,no.constant=T)
sarima(resids,1,0,1,no.constant=T)
func1<-function(x){
for (i in 1:100){
if (i%3 == 0){
disp('hello')}
else{
disp('Facebook')}
}
}
source('~/.active-rstudio-document', echo=TRUE)
arma12f2 <- arima0(ARMA,order=c(1,0,1),include.mean=FALSE,method="ML")
library(astsa)
library(forecast)
arma12f2 <- arima0(ARMA,order=c(1,0,1),include.mean=FALSE,method="ML")
library(forecast)
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=0.9,500))
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=0.9,n=500))
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=c(0.9),n))
n=500
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=c(0.9),n))
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9),n))
ar2 = arima.sim(list(order=c(2,0,0), ar=c(0,-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ar=c(0,-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ar=c(-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(-.9)), n = 500)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
library(forecast)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
ar20.0 <- arima0(ar20,order=c(1,0,1),include.mean=FALSE,method="ML")
arma20.0$coef
arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9),n=500))
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), 500)
ar20.0$coef
library(forecast)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), 500)
acf(ar20)
pacf(ar20)
ar20.0 <- arima0(ar20,order=c(1,0,1),include.mean=FALSE,method="ML")
ar20.0$coef
9500/97.5
64810000000/997
58.08/968*46
58.08-50.6
(58.08-50.6)/50.6
.7/4
350*1.44
350*1.2*1.2
430/4.5/1.6
2.3*1.07
2.3/.93
2.3/.9
7.3/3.2
60/7.2
289/1600
411/2158
582/2568
578/2375
592/2508
596/2709
215/671
160/511
35/160
55/160
1600*1.21
2568-1936
2568-1600*1.1*1.1
1.44/1.7
15*20.5
232.11-191.47
40.64*307500
.34*15/16
220000*36.13
8000000-7948600
220000*36.13-8000000
20*1.57
2.3+4.5+6.7
32+62+50
13.5/144
1.3/6.7
(19.4)^1/6
x=0.0323333
6.7*x*x*x*x*x*x
x=1.0323333
6.7*x*x*x*x*x*x
.8/32
1.5/50
0.005*1000000000
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
library(dplyr)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
for (i in 1:nrow(have_played)){
if (is.na(have_played$ProBowls[i])){
have_played$ProBowls[i]=0
}
if (is.na(have_played$AllPros[i])){
have_played$AllPros[i]=0
}
}
have_played <- have_played %>%
mutate(Success = ProBowls + 2*AllPros) %>% # Can be arbitrary
arrange(desc(Success))
# Only uncomment below if necessary
# write.csv (have_played, 'havePlayed.csv')
head(have_played)
qbs <- filter (have_played, Position == 'QB')
head(qbs)
plot(qbs$Wonderlic)
plot(qbs$Wonderlic, qbs$Success)
qbs <- filter (have_played, Position == 'QB', Success > 1)
plot(qbs$Wonderlic, qbs$Success)
qbs <- filter (have_played, Position == 'QB', Success > 0)
plot(qbs$Wonderlic, qbs$Success)
sample(1:100)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
temi=c()
temi
temi=c(temi,4)
temi
temi=c(temi,4)
temi
10/21*10000
10/21*21000
21000+10000*10/11
11/21*10/11*21000
source('~/.active-rstudio-document', echo=TRUE)
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
money <- piles*pileamount
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
result <- c(result, money)
}
}
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
money <- piles*pileamount
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
result <- c(result, money)
}
return (result)
}
getpaid(10, 10, 52, 21000, 10/21)
source('~/15th Grade/Random Bogus/getpaid.R', echo=TRUE)
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
start <- piles*pileamount
money <- start
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
money <- money - start
result <- c(result, money)
}
return (result)
}
getpaid(100, 100, 52, 21000, 10/21)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
sum(earnings)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
11/21
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
head(prosp)
setwd("~/15th Grade/STAT 411/NFLCombineAnalysis")
prosp <- read.csv(Prospects2020.csv)
prosp <- read.csv('Prospects2020.csv'')
oisdf
sldjflj;ljfs  lkas
sdflk sdf;sda
pr23i sd'as'
prosp <- read.csv('Prospects2020.csv')
head(prosp)
arrange(prosp, Wonderlic)
library(dplyr)
arrange(prosp, Wonderlic)
arrange(prosp, -Wonderlic)
filter(prosp, !is.na(Wonderlic))
prosp[prosp$Position=='WR']
prosp[prosp$Position==WR]
prosp[prosp$Position=WR]
prosp[prosp$Position='WR']
prosp
prosp$Position==WR
prosp$Position=='WR'
prosp$Position=='LB'
names(prosp)
