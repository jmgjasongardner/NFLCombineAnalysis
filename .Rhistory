ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c(0.6)),n)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
n=100
ar1=arima.sim(list(order=c(1,0,1), ar=c(0.6)),n)
n=100
ar1=arima.sim(list(order=c(1,1,0), ar=c(0.6)),n)
acf(ar1)
pacf(ar1)
ar2=arima.sim(list(order=c(1,0,0), ar=c(0.6)),n)
acf(ar2)
pacf(ar2)
ar3=arima.sim(list(order=c(0,1,0), ar=c()),n)
acf(ar3)
pacf(ar3)
??forecast
globtemp
library(astsa)
data('globtemp')
136/35
globtemp
sarima.for(globtemp,10,1,0,0)
linmod=lm(globtemp~time(globtemp),na.action=NULL)
resids=resid(linmod)
invisible(acf2(resids,max.lag=20))
sarima(resids,1,0,0,no.constant=T)
sarima(resids,1,0,0,no.constant=T)
sarima(resids,1,0,1,no.constant=T)
func1<-function(x){
for (i in 1:100){
if (i%3 == 0){
disp('hello')}
else{
disp('Facebook')}
}
}
source('~/.active-rstudio-document', echo=TRUE)
arma12f2 <- arima0(ARMA,order=c(1,0,1),include.mean=FALSE,method="ML")
library(astsa)
library(forecast)
arma12f2 <- arima0(ARMA,order=c(1,0,1),include.mean=FALSE,method="ML")
library(forecast)
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=0.9,500))
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=0.9,n=500))
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=c(0.9),n))
n=500
ar20=arima.sim(list(order=c(0,1,0), ma=0.9, ar=c(0.9),n))
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9),n))
ar2 = arima.sim(list(order=c(2,0,0), ar=c(0,-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ar=c(0,-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ar=c(-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(-.9)), n = 16)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(-.9)), n = 500)
ar2 = arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
library(forecast)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), n = 500)
ar20.0 <- arima0(ar20,order=c(1,0,1),include.mean=FALSE,method="ML")
arma20.0$coef
arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9),n=500))
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), 500)
ar20.0$coef
library(forecast)
ar20=arima.sim(list(order=c(1,0,1), ma=0.9, ar=c(0.9)), 500)
acf(ar20)
pacf(ar20)
ar20.0 <- arima0(ar20,order=c(1,0,1),include.mean=FALSE,method="ML")
ar20.0$coef
9500/97.5
64810000000/997
58.08/968*46
58.08-50.6
(58.08-50.6)/50.6
.7/4
350*1.44
350*1.2*1.2
430/4.5/1.6
2.3*1.07
2.3/.93
2.3/.9
7.3/3.2
60/7.2
289/1600
411/2158
582/2568
578/2375
592/2508
596/2709
215/671
160/511
35/160
55/160
1600*1.21
2568-1936
2568-1600*1.1*1.1
1.44/1.7
15*20.5
232.11-191.47
40.64*307500
.34*15/16
220000*36.13
8000000-7948600
220000*36.13-8000000
20*1.57
2.3+4.5+6.7
32+62+50
13.5/144
1.3/6.7
(19.4)^1/6
x=0.0323333
6.7*x*x*x*x*x*x
x=1.0323333
6.7*x*x*x*x*x*x
.8/32
1.5/50
0.005*1000000000
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
library(dplyr)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
for (i in 1:nrow(have_played)){
if (is.na(have_played$ProBowls[i])){
have_played$ProBowls[i]=0
}
if (is.na(have_played$AllPros[i])){
have_played$AllPros[i]=0
}
}
have_played <- have_played %>%
mutate(Success = ProBowls + 2*AllPros) %>% # Can be arbitrary
arrange(desc(Success))
# Only uncomment below if necessary
# write.csv (have_played, 'havePlayed.csv')
head(have_played)
qbs <- filter (have_played, Position == 'QB')
head(qbs)
plot(qbs$Wonderlic)
plot(qbs$Wonderlic, qbs$Success)
qbs <- filter (have_played, Position == 'QB', Success > 1)
plot(qbs$Wonderlic, qbs$Success)
qbs <- filter (have_played, Position == 'QB', Success > 0)
plot(qbs$Wonderlic, qbs$Success)
sample(1:100)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
temi=c()
temi
temi=c(temi,4)
temi
temi=c(temi,4)
temi
10/21*10000
10/21*21000
21000+10000*10/11
11/21*10/11*21000
source('~/.active-rstudio-document', echo=TRUE)
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
money <- piles*pileamount
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
result <- c(result, money)
}
}
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
money <- piles*pileamount
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
result <- c(result, money)
}
return (result)
}
getpaid(10, 10, 52, 21000, 10/21)
source('~/15th Grade/Random Bogus/getpaid.R', echo=TRUE)
getpaid <- function (trials, piles, hitrate, pileamount, firstpcnt){
# trials -- how many times to test the theory
# piles -- how many different groups to try and get paid on
# hitrate -- percentage chance of winning a bet (out of 100)
# pileamount -- amount of money in each different pile
# firstpcnt -- percentage of pileamount goes in first bet versus remaining
result=c()
for (j in 1:trials){
start <- piles*pileamount
money <- start
for (i in 1:piles){
pick1 <- sample(1:100,1)
if (pick1 <= hitrate){
betamnt <- firstpcnt*pileamount
net <- betamnt*(10/11)
}
else{
pick2 <- sample(1:100,1)
if (pick2 <= hitrate){
net <- (1-firstpcnt)*pileamount*(10/11)-firstpcnt*pileamount
}
else{
net <- - pileamount
}
}
money <- money + net
}
money <- money - start
result <- c(result, money)
}
return (result)
}
getpaid(100, 100, 52, 21000, 10/21)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
sum(earnings)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 56, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 55, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 53, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52, 21000, 10/21)
mean(earnings)
11/21
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
earnings <- getpaid(100, 100, 52.4, 21000, 10/21)
mean(earnings)
names(prosp)
setwd("~/15th Grade/STAT 411/NFLCombineAnalysis")
prosp = read.csv('Prospects2020_2.csv')
names(prosp)
old <- read.csv('DataUpdate4.csv')
head(old)
current_players <- old
head(current_players)
head(current_players)
head(current_players)
dim(current_players)
prospective_players <- prosp
head(prospective_players)
dim(prospective_players)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
library(dplyr)
dat <- read.csv('DataUpdate1.csv')
have_played <- dat %>%
filter(Year != 2020)
for (i in 1:nrow(have_played)){
if (is.na(have_played$ProBowls[i])){
have_played$ProBowls[i]=0
}
if (is.na(have_played$AllPros[i])){
have_played$AllPros[i]=0
}
}
have_played <- have_played %>%
mutate(Success = ProBowls + 2*AllPros) %>% # Can be arbitrary
arrange(desc(Success))
# Only uncomment below if necessary
# write.csv (have_played, 'havePlayed.csv')
qbs <- filter (have_played, Position == 'QB', Success > 0)
lm(Success ~ Wonderlic + Height + Weight, data = qbs)
# There being so many zeros makes this hella tough
knitr::opts_chunk$set(echo = TRUE)
curr <- read.csv('DataUpdate3.csv')
prosp <- read.csv('Prospects2020.csv')
dim(curr)
dim(prosp)
head(curr)
head(prosp)
curr$X <- NULL
curr <- curr %>%
select(c(9:11, 1:8, everything())) %>%
rename(Forty = X40.YD,
ThreeCone = X3Cone) %>%
filter (Games >= 8) %>%
arrange(-AV16, Name)
#write.csv(curr, 'DataUpdate4.csv')
qb <- filter(curr, Position == 'QB')
#write.csv(qb, 'QBs.csv')
rb <- filter(curr, Position == 'RB')
#write.csv(rb, 'RBs.csv')
wr <- filter(curr, Position == 'WR')
#write.csv(wr, 'WRs.csv')
te <- filter(curr, Position == 'TE')
#write.csv(te, 'TEs.csv')
ol <- filter(curr, Position == 'OL')
#write.csv(ol, 'OLs.csv')
kick <- filter(curr, Position == 'K')
#write.csv(kick, 'Kickers.csv')
punt <- filter(curr, Position == 'P')
#write.csv(punt, 'Punters.csv')
dl <- filter(curr, Position == 'DL')
#write.csv(dl, 'DLs.csv')
lb <- filter(curr, Position == 'LB')
#write.csv(lb, 'LBs.csv')
db <- filter(curr, Position == 'DB')
#write.csv(db, 'DBs.csv')
curr <- read.csv('DataUpdate3.csv')
prosp <- read.csv('Prospects2020_2.csv')
dim(curr)
dim(prosp)
head(curr)
head(prosp)
curr$X <- NULL
curr <- curr %>%
select(c(9:11, 1:8, everything())) %>%
rename(Forty = X40.YD,
ThreeCone = X3Cone) %>%
filter (Games >= 8) %>%
arrange(-AV16, Name)
#write.csv(curr, 'DataUpdate4.csv')
qb <- filter(curr, Position == 'QB')
#write.csv(qb, 'QBs.csv')
rb <- filter(curr, Position == 'RB')
#write.csv(rb, 'RBs.csv')
wr <- filter(curr, Position == 'WR')
#write.csv(wr, 'WRs.csv')
te <- filter(curr, Position == 'TE')
#write.csv(te, 'TEs.csv')
ol <- filter(curr, Position == 'OL')
#write.csv(ol, 'OLs.csv')
kick <- filter(curr, Position == 'K')
#write.csv(kick, 'Kickers.csv')
punt <- filter(curr, Position == 'P')
#write.csv(punt, 'Punters.csv')
dl <- filter(curr, Position == 'DL')
#write.csv(dl, 'DLs.csv')
lb <- filter(curr, Position == 'LB')
#write.csv(lb, 'LBs.csv')
db <- filter(curr, Position == 'DB')
#write.csv(db, 'DBs.csv')
#write.csv(curr, 'DataUpdate4.csv')
curr <- read.csv('DataUpdate4.csv')
curr <- read.csv('DataUpdate3.csv')
prosp <- read.csv('Prospects2020_2.csv')
dim(curr)
dim(prosp)
head(curr)
head(prosp)
curr$X <- NULL
curr <- curr %>%
select(c(9:11, 1:8, everything())) %>%
rename(Forty = X40.YD,
ThreeCone = X3Cone) %>%
filter (Games >= 8) %>%
arrange(-AV16, Name)
#write.csv(curr, 'DataUpdate4.csv')
curr <- read.csv('DataUpdate4.csv')
qb <- filter(curr, Position == 'QB')
#write.csv(qb, 'QBs.csv')
rb <- filter(curr, Position == 'RB')
#write.csv(rb, 'RBs.csv')
wr <- filter(curr, Position == 'WR')
#write.csv(wr, 'WRs.csv')
te <- filter(curr, Position == 'TE')
#write.csv(te, 'TEs.csv')
ol <- filter(curr, Position == 'OL')
#write.csv(ol, 'OLs.csv')
kick <- filter(curr, Position == 'K')
#write.csv(kick, 'Kickers.csv')
punt <- filter(curr, Position == 'P')
#write.csv(punt, 'Punters.csv')
dl <- filter(curr, Position == 'DL')
#write.csv(dl, 'DLs.csv')
lb <- filter(curr, Position == 'LB')
#write.csv(lb, 'LBs.csv')
db <- filter(curr, Position == 'DB')
#write.csv(db, 'DBs.csv')
genlm <- lm(AV16 ~ Height + Weight + Wonderlic + Forty + Bench + Vert + Broad + Shuttle + ThreeCone, data = curr)
summary(genlm)
