x1 = coal$disasters[coal$idx <= theta[ele]]
x2 = coal$disasters[coal$idx > theta[ele]]
w[ele] = sum(dpois(x1, lambda1[ele], log=TRUE)) +
sum(dpois(x2, lambda2[ele], log=TRUE))
}
w <- exp(w - max(w))
w <- w / sum(w)
i.sir = sample(1:N, N, replace = T, prob = w)
theta.sir = theta[i.sir]
lambda1.sir = lambda1[i.sir]
lambda2.sir = lambda2[i.sir]
mean(theta.sir) #Estimate for Theta
mean(lambda1.sir) #Estimate for Lambda1
mean(lambda2.sir) #Estimate for Lambda2
c(quantile(theta.sir, 0.025), quantile(theta.sir, 0.975))
c(quantile(lambda1.sir, 0.025), quantile(lambda1.sir, 0.975))
c(quantile(lambda2.sir, 0.025), quantile(lambda2.sir, 0.975))
hist(theta.sir, 1000)
hist(lambda1.sir, 1000)
hist(lambda2.sir, 1000)
plot(lambda1, lambda2)
points(lambda1.sir, lambda2.sir, col = 2)
coal$num = 1:112
par(mfrow=c(3,4))
set.seed(43534)
N = 100000
#a
theta = sample(1:111,N,replace=T)
a1 = rgamma(N,shape=10,rate=10)
lambda1 = rgamma(N,shape=3,rate=a1)
a2 = rgamma(N,shape=10,rate=10)
lambda2 = rgamma(N,shape=3,rate=a2)
w = rep(NA,N)
for(i in 1:N)
{
x1 = coal$disasters[coal$num<=theta[i]]
x2 = coal$disasters[coal$num>theta[i]]
w[i] = sum(dpois(x1,lambda1[i],log=TRUE))+        #Working on log-scale is more stable
sum(dpois(x2,lambda2[i],log=TRUE))
}
w = exp(w-max(w))
w = w/sum(w)
ind.sir = sample(1:N,N,replace=T,prob=w)
theta.sir = theta[ind.sir]
lambda1.sir = lambda1[ind.sir]
lambda2.sir = lambda2[ind.sir]
print("Prior from (a)")
cat("Estimate of theta",mean(theta.sir),"\n")
hist(theta.sir,100)
cat("Credibility interval for theta:",
quantile(theta.sir,0.025),quantile(theta.sir,0.975),"\n")
cat("Estimate of lambda1",mean(lambda1.sir),"\n")
hist(lambda1.sir,100)
cat("Credibility interval for lambda1:",
quantile(lambda1.sir,0.025),quantile(lambda1.sir,0.975),"\n")
cat("Estimate of lambda2",mean(lambda2.sir),"\n")
hist(lambda2.sir,100)
cat("Credibility interval for lambda2:",
quantile(lambda2.sir,0.025),quantile(lambda2.sir,0.975),"\n")
plot(lambda1,lambda2)
points(lambda1.sir,lambda2.sir,col=2)
hist(theta.sir,100)
cat("Credibility interval for theta:",
quantile(theta.sir,0.025),quantile(theta.sir,0.975),"\n")
coal <- read.table("coal.dat", header = TRUE)
coal$num = 1:112
set.seed(43534)
N = 100000
theta = sample(1:111,N,replace=T)
a1 = rgamma(N,shape=10,rate=10)
lambda1 = rgamma(N,shape=3,rate=a1)
a2 = rgamma(N,shape=10,rate=10)
lambda2 = rgamma(N,shape=3,rate=a2)
w = rep(NA,N)
for(i in 1:N)
{
x1 = coal$disasters[coal$num<=theta[i]]
x2 = coal$disasters[coal$num>theta[i]]
w[i] = sum(dpois(x1,lambda1[i],log=TRUE))+        #Working on log-scale is more stable
sum(dpois(x2,lambda2[i],log=TRUE))
}
w = exp(w-max(w))
w = w/sum(w)
ind.sir = sample(1:N,N,replace=T,prob=w)
theta.sir = theta[ind.sir]
lambda1.sir = lambda1[ind.sir]
lambda2.sir = lambda2[ind.sir]
hist(theta.sir,100)
hist(lambda1.sir,100)
hist(lambda2.sir,100)
plot(lambda1,lambda2)
points(lambda1.sir,lambda2.sir,col=2)
?matrix
?show
n <- 25
lambda <- 2
N <- 10000
X <- matrix(rpois(N * n, lambda), nrow = n, byrow = FALSE)
mean.X <- colMeans(X)
Z <- (mean.X - 2) / sqrt(2/25)
val <- as.numeric(Z > 1.645)
#Simple MC
mu1 <- mean(val)
se1 <- sd(val)
c(mu.1,se.1)
n <- 25
lambda <- 2
N <- 10000
X <- matrix(rpois(N * n, lambda), nrow = n, byrow = FALSE)
mean.X <- colMeans(X)
Z <- (mean.X - 2) / sqrt(2/25)
val <- as.numeric(Z > 1.645)
#Simple MC
mu1 <- mean(val)
se1 <- sd(val)
c(mu1,se1)
plot(2.0+c(0:10)*0.2,err,xlab="lambda")
for(i in 1:10)
{
lambda = 2.0 + i*0.2
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
err = c(err,mean(D1))
}
plot(2.0+c(0:10)*0.2,err,xlab="lambda")
n=25
lambda = 2
N = 10000
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
mu.1 = mean(D1)
se.1 = sd(D1)
show(c(mu.1,se.1))
err = mu.1
for(i in 1:10)
{
lambda = 2.0 + i*0.2
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
err = c(err,mean(D1))
}
plot(2.0+c(0:10)*0.2,err,xlab="lambda")
prod
n <- 25
lambda <- 2
N <- 10000
X <- matrix(rpois(N * n, lambda), nrow = n, byrow = FALSE)
mean.X <- colMeans(X)
Z <- (mean.X - 2) / sqrt(2/25)
val <- as.numeric(Z > 1.645)
mu1 <- mean(val)
se1 <- sd(val)
c(mu1,se1)
r <- 100
p <- r / (lambda + r)
X <- matrix(rnbinom(N * n, r, p), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dnbinom(X, r, p, log = TRUE))
X <- matrix(rpois(N * n, 2.4653), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dpois(X, 2.4653, log = TRUE))
Z <- (mean.X - 2) / sqrt(2/25)
w <- apply(W, 2, prod)
val <- as.numeric(Z > 1.645)
mu2 <- mean(val * w)
se2 <- sd(val * w)
c(mu2, se2)
w.std <- (N * w) / sum(w)
mu3 <- mean(val*w.std)
se3 <- sd(val*w.std)
c(mu3,se3)
mean(val)
r <- 100
p <- r / (lambda + r)
X <- matrix(rnbinom(N * n, r, p), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dnbinom(X, r, p, log = TRUE))
X <- matrix(rpois(N * n, 2.4653), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dpois(X, 2.4653, log = TRUE))
Z <- (mean.X - 2) / sqrt(2/25)
w <- apply(W, 2, prod)
val <- as.numeric(Z > 1.645)
mu2 <- mean(val * w)
se2 <- sd(val * w)
c(mu2, se2)
w.std <- (N * w) / sum(w)
mu3 <- mean(val*w.std)
se3 <- sd(val*w.std)
c(mu3,se3)
plot(2 + c(0:10)*0.2, mu2, xlab="lambda")
r <- 100
p <- r / (lambda + r)
X <- matrix(rnbinom(N * n, r, p), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dnbinom(X, r, p, log = TRUE))
X <- matrix(rpois(N * n, 2.4653), nrow = n, byrow = FALSE)
W <- exp(dpois(X, lambda, log=TRUE) - dpois(X, 2.4653, log = TRUE))
Z <- (mean.X - 2) / sqrt(2/25)
w <- apply(W, 2, prod)
val <- as.numeric(Z > 1.645)
mu2 <- mean(val * w)
se2 <- sd(val * w)
c(mu2, se2)
w.std <- (N * w) / sum(w)
mu3 <- mean(val*w.std)
se3 <- sd(val*w.std)
c(mu3,se3)
plot(2 + c(0:10)*0.2, c(mu2,val), xlab="lambda")
n <- 25
lambda <- 2
N <- 10000
X <- matrix(rpois(N * n, lambda), nrow = n, byrow = FALSE)
mean.X <- colMeans(X)
Z <- (mean.X - 2) / sqrt(2/25)
val <- as.numeric(Z > 1.645)
mu1 <- mean(val)
se1 <- sd(val)
c(mu1,se1)
plot(2 + c(0:10)*0.2, c(mu1,val), xlab="lambda")
mu1 <- mean(val)
se1 <- sd(val)
c(mu1,se1)
plot(2 + c(0:10)*0.2, c(mu1,mean(val)), xlab="lambda")
mu1 <- mean(val)
se1 <- sd(val)
c(mu1,se1)
plot(2 + c(0:10)*0.2, c(mu1,mean(val)), xlab="lambda")
c(mu1, mean(val))
2 + c(0:10)*0.2
n=25
lambda = 2
N = 10000
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
mu.1 = mean(D1)
se.1 = sd(D1)
show(c(mu.1,se.1))
#Antithetic, using generation from
N2 = N/2
U = runif(N2*n)
X = cbind(matrix(qpois(U,lambda),nrow=n),
matrix(qpois(1-U,lambda),nrow=n))
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D2 = as.numeric(Z>1.645)
mu.2 = mean(D2)
se.2 = sd(D2)
show(c(mu.2,se.2))
#Importance sampling with negative binomial
r = 100
p = r/(lambda+r)
X = matrix(rnbinom(N*n,r,p),nrow=n)
W = exp(dpois(X,lambda,log=TRUE)-dnbinom(X,r,p,log=TRUE))
X = matrix(rpois(N*n,2.4653),nrow=n)
W = exp(dpois(X,lambda,log=TRUE)-dpois(X,2.4653,log=TRUE))
Z = (Xmean-2)/sqrt(2/25)
w = apply(W,2,prod)
D3 = as.numeric(Z>1.645)
mu.3 = mean(D3*w)
se.3 = sd(D3*w)
show(c(mu.3,se.3))
w.std = N*w/sum(w)
mu.4 = mean(D3*w.std)
se.4 = sd(D3*w.std)
show(c(mu.4,se.4))
#Control variates for weights
rho = -cov(D3,w)/var(w)
mu.5 = mean(D3) + rho*(mean(w)-1)
se.5 = sd(D3 + rho*(w-1))
show(c(mu.5,se.5))
#Control variates using E(X)=lambda
rho = -cov(D1,Xmean)/var(Xmean)
mu.6 = mean(D1) + rho*(mean(Xmean)-lambda)
se.6 = sd(D1 + rho*(Xmean-lambda))
show(c(mu.6,se.6))
err = mu.1
for(i in 1:10)
{
lambda = 2.0 + i*0.2
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
err = c(err,mean(D1))
}
plot(seq(2.2, 4, by = 0.2),err,xlab="lambda")
plot(2.0+c(1:10)*0.2,err,xlab="lambda")
#Exercise 6.6
n=25
lambda = 2
N = 10000
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
mu.1 = mean(D1)
se.1 = sd(D1)
show(c(mu.1,se.1))
#Antithetic, using generation from
N2 = N/2
U = runif(N2*n)
X = cbind(matrix(qpois(U,lambda),nrow=n),
matrix(qpois(1-U,lambda),nrow=n))
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D2 = as.numeric(Z>1.645)
mu.2 = mean(D2)
se.2 = sd(D2)
show(c(mu.2,se.2))
#Importance sampling with negative binomial
r = 100
p = r/(lambda+r)
X = matrix(rnbinom(N*n,r,p),nrow=n)
W = exp(dpois(X,lambda,log=TRUE)-dnbinom(X,r,p,log=TRUE))
X = matrix(rpois(N*n,2.4653),nrow=n)
W = exp(dpois(X,lambda,log=TRUE)-dpois(X,2.4653,log=TRUE))
Z = (Xmean-2)/sqrt(2/25)
w = apply(W,2,prod)
D3 = as.numeric(Z>1.645)
mu.3 = mean(D3*w)
se.3 = sd(D3*w)
show(c(mu.3,se.3))
w.std = N*w/sum(w)
mu.4 = mean(D3*w.std)
se.4 = sd(D3*w.std)
show(c(mu.4,se.4))
#Control variates for weights
rho = -cov(D3,w)/var(w)
mu.5 = mean(D3) + rho*(mean(w)-1)
se.5 = sd(D3 + rho*(w-1))
show(c(mu.5,se.5))
#Control variates using E(X)=lambda
rho = -cov(D1,Xmean)/var(Xmean)
mu.6 = mean(D1) + rho*(mean(Xmean)-lambda)
se.6 = sd(D1 + rho*(Xmean-lambda))
show(c(mu.6,se.6))
err = mu.1
for(i in 1:10)
{
lambda = 2.0 + i*0.2
X = matrix(rpois(N*n,lambda),nrow=n)
Xmean = colMeans(X)
Z = (Xmean-2)/sqrt(2/25)
D1 = as.numeric(Z>1.645)
#Simple MC
err = c(err,mean(D1))
}
plot(2.0+c(0:10)*0.2,err,xlab="lambda")
err
mean(D1)
mu.1
library(blockTools)
library(RcppArmadillo)
install.packages("BOIN")
?BOIN
setwd("~/Desktop/NFLCombineAnalysis")
data <- read.csv("Prospects2020_2.csv")
unique(data$Position)
View(data)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] == "OL"
}
if(data$Position[val] == "S") {
data$Position[val] == "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] == "DB"
}
}
unique(data$Position)
data <- read.csv("Prospects2020_2.csv")
unique(data$Position)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] == "OL"
}
if(data$Position[val] == "S") {
data$Position[val] == "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] == "DB"
}
}
data <- read.csv("Prospects2020_2.csv")
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] == "OL"
}
if(data$Position[val] == "S") {
data$Position[val] == "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] == "DB"
}
}
unique(data$Position)
View(data)
data$Position
data <- read.csv("Prospects2020_2.csv")
data$Position <- as.character(data$Position)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] == "OL"
}
if(data$Position[val] == "S") {
data$Position[val] == "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] == "DB"
}
}
unique(data$Position)
data <- read.csv("Prospects2020_2.csv")
data$Position <- as.character(data$Position)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] <- "OL"
}
if(data$Position[val] == "S") {
data$Position[val] <- "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] <- "DB"
}
}
unique(data$Position)
data
data <- read.csv("Prospects2020_2.csv")
data$Position <- as.character(data$Position)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] <- "OL"
}
if(data$Position[val] == "S") {
data$Position[val] <- "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] <- "DB"
}
}
unique(data$Position)
data <- read.csv("Prospects2020_2.csv")
data$Position <- as.character(data$Position)
for(val in 1:length(data)) {
if(data$Position[val] == "LS") {
data$Position[val] <- "OL"
}
if(data$Position[val] == "S") {
data$Position[val] <- "DB"
}
if(data$Position[val] == "CB") {
data$Position[val] <- "DB"
}
}
unique(data$Position)
prospects <- read.csv("Prospects2020_2.csv")
prospects$Position <- as.character(prospects$Position)
for(val in 1:length(prospects)) {
if(prospects$Position[val] == "LS") {
prospects$Position[val] <- "OL"
}
if(prospects$Position[val] == "S") {
prospects$Position[val] <- "DB"
}
if(prospects$Position[val] == "CB") {
prospects$Position[val] <- "DB"
}
}
unique(prospects$Position)
length(prospects)
AVPlayers <- read.csv("AVPlayers.csv")
DataUpdate1 <- read.csv("DataUpdate1.csv")
length(DataUpdate1)
prospects <- read.csv("Prospects2020_2.csv")
prospects$Position <- as.character(prospects$Position)
for(val in 1:length(prospects$Position)) {
if(prospects$Position[val] == "LS") {
prospects$Position[val] <- "OL"
}
if(prospects$Position[val] == "S") {
prospects$Position[val] <- "DB"
}
if(prospects$Position[val] == "CB") {
prospects$Position[val] <- "DB"
}
}
unique(prospects$Position)
prospects <- read.csv("Prospects2020_2.csv")
prospects$Position <- as.character(prospects$Position)
for(val in 1:length(prospects$Position)) {
if(prospects$Position[val] == "LS") {
prospects$Position[val] <- "OL"
}
if(prospects$Position[val] == "S") {
prospects$Position[val] <- "DB"
}
if(prospects$Position[val] == "CB") {
prospects$Position[val] <- "DB"
}
}
unique(prospects$Position)
write.csv(prospects, "Prospects2020_2.csv")
